#define textcnt 36-1
UBYTE text[] __attribute__((section (".MEMF_FAST")))  = {	
"              "
"              "
"x   ABYSS     "
"    ALTAIR    "
"x ANDROMEDA   "
" BATMAN GROUP "
"x  DARKAGE    "
"  DEADLINERS  "
"x DEKADENCE   "
"    DESIRE    "
"x EPHIDRENA   "
"x FAIRLIGHT   "
"x    FFP      "
"   GHOSTOWN   "
"x  HAUJOBB    "
"    INSANE    "
"x   LEMON.    "
"x  LOONIES    "
"x   MELON     "
"x   M.O.N     "
"x NAH KOLOR   "
"x  OFFENCE    "
"x  OXYGENE    "
"x  PACIFIC    "
"xPLANET JAZZ  "
"x RABENAUGE   "
"    REBELS    "
"    SCARAB    "
"x  SCOOPEX    "
"  SPACEBALLS  "
"   SPECTROX   "
"xSPREADPOINT  "
"x    TEK      "
"x  TRAKTOR    "
"              "
"              "	
};

#define textcnt2 10-1
UBYTE text2[] __attribute__((section (".MEMF_FAST")))  = {	
"     SOIL     "
" ____________ "
" CODE _ MUSIC "
"x  VIRGILL    "
" ____________ "
"   GRAPHICS   "
"x CRITIKILL   "
" ____________ "
"              "
};

UBYTE text3[] __attribute__((section (".MEMF_FAST")))  = {	
"   CALL OUR   "
"    BOARDS    "
" ____________ "
"xALCATRAZ HQ  "
"x49_555_NOSE  "
" ____________ "
"xHAUJOBB BBQ  "
"  49_555_XXX  "
"              "
};

UBYTE text4[] __attribute__((section (".MEMF_FAST")))  = {	
"  THANKS FOR  "
"  YOUR MONEY  "
" ____________ "
"  NOW PLEASE  "
"x   LEAVE     "
" ____________ "
"              "
"              "
"              "
};

UBYTE invader_data1[ ] __attribute__((section (".MEMF_FAST")))  = {	
0x00, 0x30, 0x0c, 0x00,  // every bit is a byte on plane
0x00, 0x0f, 0xf0, 0x00,
0x00, 0x3f, 0xfc, 0x00, 
0x00, 0xf3, 0xcf, 0x00,
0x03, 0xff, 0xff, 0xc0, 
0x03, 0x3f, 0xfc, 0xc0, 
0x03, 0x30, 0x0c, 0xc0, 
0x00, 0x0c, 0x30, 0x00
};

UBYTE invader_data2[ ] __attribute__((section (".MEMF_FAST"))) = {	
0x00, 0xc0, 0x03, 0x00,
0x00, 0x30, 0x0c, 0x00, 
0x00, 0xff, 0xff, 0x00, 
0x03, 0xff, 0xff, 0xc0, 
0x03, 0xf3, 0xcf, 0xc0,
0x03, 0x3f, 0xfc, 0xc0, 
0x03, 0x0c, 0x30, 0xc0, 
0x00, 0x30, 0x0c, 0x00
};

// sprite data laser
UWORD sprite_laser[ ] __attribute__((section (".MEMF_CHIP"))) = {  // can be calculated	
  0x688c, 0xff00, 0x07f0, 0x0000, 0x0810, 0x07e0, 0x37ec, 0x0ff0
, 0x2ff4, 0x1818, 0x581a, 0x37ec, 0x595a, 0x356c, 0xb2ad, 0x6ab6
, 0xb54d, 0x6d56, 0xb2ad, 0x6ab6, 0x595a, 0x356c, 0x599a, 0x37ec
, 0x2db4, 0x1bd8, 0x1188, 0x0ff0, 0x0db0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0, 0x05a0, 0x03c0
, 0x05a0, 0x03c0, 0x0000, 0x0000
};

/*
// sprite data stripe 1
UWORD sprite_stripe1[ ] __attribute__((section (".MEMF_CHIP"))) = {	
  0x2950, 0x2802, 0xeeef, 0x0000, 0xeeef, 0x0000, 0xeeef, 0x0000
, 0x0000, 0x0000, 0x0c0d, 0xeeee, 0x2829, 0xcece, 0x6061, 0x8e8e
, 0x0000, 0x0000, 0xc0cd, 0xeeee, 0xa2ab, 0xcccc, 0x6667, 0x8888
, 0x6000, 0x8000, 0x6ee3, 0x800c, 0x0ee3, 0x000c, 0xeeef, 0x0000
, 0xeeef, 0x0000, 0xee0f, 0x0000, 0x0eff, 0x0000, 0xeeff, 0x00c0
, 0xeebf, 0x00c0, 0xeeff, 0x0000, 0x0e0f, 0x0000, 0xeeef, 0x0c00
, 0xeaef, 0x0c00, 0xeeef, 0x0000, 0x000f, 0x0000, 0xffff, 0x0c00
, 0xfbff, 0x0c00, 0xffff, 0x0000, 0x0e00, 0x0000, 0xeecb, 0x00f0
, 0xee8b, 0x00f0, 0xee3b, 0x00c0, 0x0e3b, 0x00c0, 0xfe03, 0x0000
, 0xfeff, 0x0000, 0xfeff, 0x00c0, 0x00bf, 0x00c0, 0xee00, 0xcc00
, 0xaafb, 0xcc00, 0xeefb, 0x00c3, 0xeeba, 0x00c3, 0xee0b, 0x00f0
, 0xee0b, 0x00f0, 0xeefb, 0x0000, 0x0003, 0x0000, 0xfffb, 0x0000
, 0xfffb, 0x0000, 0xfffb, 0x0000, 0x0003, 0x0000, 0xcffb, 0xf000
, 0x8ffb, 0xf000, 0x3ffb, 0xc000, 0x3fe0, 0xc000, 0xffef, 0x000c
, 0xe00b, 0x000c, 0xefe3, 0x0c0c, 0xebe3, 0x0c0c, 0xefe3, 0x000c
, 0xee03, 0x000c, 0xeeef, 0x0000, 0x0ee0, 0x0000, 0xeedb, 0x00e0
, 0xeebb, 0x00c0, 0xee3b, 0x00c0, 0x0e3b, 0x00c0, 0xee3b, 0x00c0
, 0xee3b, 0x00c0, 0xeefb, 0x0000, 0x0e03, 0x0000, 0xcedf, 0xe0e0
, 0xaebf, 0xc0c0, 0x6e7f, 0x8080, 0x0e03, 0x0000, 0xeedb, 0x00e0
, 0xeebb, 0x00c0, 0xee3b, 0x00c0, 0xee3b, 0x00c0, 0xeefb, 0x0000
, 0x0e03, 0x0000, 0xfff8, 0x0003, 0xfff8, 0x0003, 0xfffb, 0x0000
, 0x0e03, 0x0000, 0xeedb, 0x00e3, 0xeeba, 0x00c3, 0xee79, 0x0082
, 0x0e03, 0x0000, 0xee3f, 0x00c0, 0xee3f, 0x00c0, 0xeeff, 0x0000
, 0x0e00, 0x0000, 0xeedf, 0x00e0, 0xeebf, 0x00c0, 0xee3f, 0x00c0
, 0x0e3f, 0x00c0, 0xce3f, 0xe0c0, 0xae3f, 0xc0c0, 0x6eff, 0x8000
, 0x0ee0, 0x0000, 0xeeed, 0x000e, 0xeeeb, 0x000c, 0xeee7, 0x0008
, 0x000f, 0x0000, 0xffef, 0x0000, 0xffef, 0x0000, 0xffef, 0x0000
, 0xf80f, 0x0000, 0xfb6f, 0x0380, 0xfaef, 0x0300, 0xf8ef, 0x0300
, 0xf8ef, 0x0300, 0xfbef, 0x0000, 0x0000, 0x0000, 0xdfff, 0xe000
, 0xbfff, 0xc000, 0x7fff, 0x8000, 0xe000, 0x0000, 0xedbb, 0x0e03
, 0xebba, 0x0c03, 0xe7b9, 0x0802, 0xee00, 0x0000, 0xeedf, 0x00e0
, 0xeebf, 0x00c0, 0xfe7f, 0x0080, 0xfeef, 0x0000, 0xfeef, 0x0000
, 0x00ef, 0x0000, 0xeeed, 0x000e, 0xeeeb, 0x000c, 0xeee7, 0x0008
, 0xeee0, 0x0000, 0xeedf, 0x00e0, 0xeebf, 0x00c0, 0xee7f, 0x0080
, 0xee00, 0x0000, 0xedbb, 0x0e03, 0xebba, 0x0c03, 0xe7b9, 0x0802
, 0xe000, 0x0000, 0xdfff, 0xe000, 0xbfff, 0xc000, 0x7fff, 0x8000
, 0x0000, 0x0000, 0xfbef, 0x0300, 0xfaef, 0x0300, 0xf8ef, 0x0300
, 0xf8ef, 0x0300, 0xfbef, 0x0000, 0xf80f, 0x0000, 0xffef, 0x0000
, 0xffef, 0x0000, 0xffef, 0x0000, 0x000f, 0x0000, 0xcecd, 0xe0ee
, 0xaeab, 0xc0cc, 0x6e27, 0x80c8, 0x0e20, 0x00c0, 0xee3f, 0x00c0
, 0xee3f, 0x00c0, 0xee3f, 0x00c0, 0x0e3f, 0x00c0, 0xee3f, 0x00c0
, 0xee3f, 0x00c0, 0xeeff, 0x0000, 0x0e00, 0x0000, 0xeedf, 0x00e0
, 0xeebf, 0x00c0, 0xee7f, 0x0080, 0x0e03, 0x0000, 0xeedb, 0x00e3
, 0xeeba, 0x00c3, 0xee79, 0x0082, 0x0e03, 0x0000, 0xfff8, 0x0003
, 0xfff8, 0x0003, 0xfffb, 0x0000, 0x0e03, 0x0000, 0xcedb, 0xe0e0
, 0xaebb, 0xc0c0, 0x6e3b, 0x80c0, 0xee3b, 0x00c0, 0xeefb, 0x0000
, 0x0e03, 0x0000, 0xce3f, 0xe0c0, 0xae3f, 0xc0c0, 0x6eff, 0x8000
, 0x0e03, 0x0000, 0xeedb, 0x00e0, 0xeebb, 0x00c0, 0xee3b, 0x00c0
, 0x0e3b, 0x00c0, 0xee3b, 0x00c0, 0xee3b, 0x00c0, 0xeefb, 0x0000
, 0x0ee0, 0x0000, 0xeeed, 0x000e, 0xee0b, 0x000c, 0xede3, 0x0e0c
, 0xebe3, 0x0c0c, 0xe7e3, 0x080c, 0xe003, 0x000c, 0xdfe0, 0xe000
, 0xbffb, 0xc000, 0x03fb, 0xfc00, 0x03fb, 0xfc00, 0xfffb, 0x0000
, 0x0003, 0x0000, 0xfffb, 0x0000, 0xfffb, 0x0000, 0xfffb, 0x0000
, 0x0003, 0x0000, 0xcccb, 0xeef3, 0xaa8a, 0xccf3, 0x6638, 0x88c3
, 0xee38, 0x00c3, 0xeefb, 0x0000, 0xee00, 0x0000, 0xeedf, 0x00e3
, 0x00be, 0x00c3, 0xfc7d, 0x0e82, 0xfa03, 0x0c00, 0xf6db, 0x08e0
, 0x0ebb, 0x00c0, 0xee0b, 0x00f3, 0xee0a, 0x00f3, 0xeef9, 0x0002
, 0x0e00, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000, 0xffff, 0x0000
, 0x000f, 0x0000, 0xeeef, 0x0000, 0xeeef, 0x0000, 0xeeef, 0x0000
, 0x0e0f, 0x0000, 0xe2df, 0x0ce0, 0xe2bf, 0x0cc0, 0xee7f, 0x0080
, 0x0e0f, 0x0000, 0xceef, 0xe000, 0xaeef, 0xc000, 0x2eed, 0xc00e
, 0x0eeb, 0x000c, 0xeee7, 0x0008, 0xe000, 0x0000, 0xfecf, 0x00e0
, 0xfeaf, 0x00c0, 0xfe6f, 0x0080, 0x0000, 0x0000, 0xec0d, 0x0eee
, 0xea2b, 0x0ccc, 0xe667, 0x0888, 0x0000, 0x0000, 0xeeef, 0x0000
, 0xeeef, 0x0000, 0x0000, 0x0000
};
*/

// sprite data stripe 1  // data will be created
UWORD sprite_stripe1[64*8+4] __attribute__((section (".MEMF_CHIP"))) = {
};
// sprite data stripe 2  // data will be created
UWORD sprite_stripe2[64*8+4] __attribute__((section (".MEMF_CHIP"))) = {
};

// sprite data dump
UWORD sprite_ball1[16*2+4] __attribute__((section (".MEMF_CHIP"))) = {
};

UWORD sprite_ball2[16*2+4] __attribute__((section (".MEMF_CHIP"))) = {	
};	

UWORD sprite_ball3[16*2+4] __attribute__((section (".MEMF_CHIP"))) = {	
};	

UWORD sprite_ball4[16*2+4] __attribute__((section (".MEMF_CHIP"))) = {	
};	

UWORD sprite_ship_left[32*2+4] __attribute__((section (".MEMF_CHIP"))) = {	
  0x2c40, 0x4c01, 0x0001, 0x0000, 0x0003, 0x0001, 0x0007, 0x0003
, 0x0004, 0x0003, 0x0005, 0x0002, 0x0007, 0x0000, 0x0006, 0x0001
, 0x000d, 0x0006, 0x001b, 0x000d, 0x001d, 0x000b, 0x0015, 0x000b
, 0x0015, 0x000b, 0x001e, 0x0001, 0x0016, 0x0009, 0x012e, 0x2011
, 0x0167, 0x6039, 0x61cc, 0x6073, 0x619d, 0x00ef, 0x633d, 0x01d3
, 0x647e, 0x03a3, 0x7bfe, 0x0401, 0x34bd, 0x4f42, 0x1ffb, 0x6006
, 0x0027, 0x605c, 0x601f, 0x0020, 0x0017, 0x000c, 0x0002, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0002, 0x0002, 0x0004, 0x0004, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000
};	
UWORD sprite_ship_left1[12] __attribute__((section (".MEMF_CHIP"))) = {	
  0x0000, 0x0000, 0x0000, 0x0002, 0x0002, 0x0004, 0x0004, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000
};
UWORD sprite_ship_left2[12] __attribute__((section (".MEMF_CHIP"))) = {	
  0x0000, 0x0000, 0x0000, 0x0002, 0x0000, 0x0006, 0x0002, 0x0004
, 0x0006, 0x0000, 0x0000, 0x0000
};

UWORD sprite_ship_right[32*2+4] __attribute__((section (".MEMF_CHIP"))) = {	
  0x2c40, 0x4c01, 0x8000, 0x0000, 0xc000, 0x8000, 0xe000, 0xc000
, 0x2000, 0xc000, 0xa000, 0x4000, 0xe000, 0x0000, 0x6000, 0x8000
, 0xb000, 0x6000, 0xd800, 0xb000, 0xb800, 0xd000, 0xa800, 0xd000
, 0xa800, 0xd000, 0x7800, 0x8000, 0x6800, 0x9000, 0x7480, 0x8804
, 0xe680, 0x9c06, 0x3386, 0xce06, 0xb986, 0xf700, 0xbcc6, 0xcb80
, 0x7e26, 0xc5c0, 0x7fde, 0x8020, 0xbd2c, 0x42f2, 0xdff8, 0x6006
, 0xe400, 0x3a06, 0xf806, 0x0400, 0xe800, 0x3000, 0x4000, 0x0000
, 0x0000, 0x0000, 0x0000, 0x4000, 0x4000, 0x2000, 0x2000, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000
};	
UWORD sprite_ship_right1[12] __attribute__((section (".MEMF_CHIP"))) = {	
  0x0000, 0x0000, 0x0000, 0x4000, 0x4000, 0x2000, 0x2000, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000
};
UWORD sprite_ship_right2[12] __attribute__((section (".MEMF_CHIP"))) = {	
  0x0000, 0x0000, 0x0000, 0x4000, 0x0000, 0x6000, 0x4000, 0x2000
, 0x6000, 0x0000, 0x0000, 0x0000
};

UWORD sprite_bubble_left[32*2+4] __attribute__((section (".MEMF_CHIP"))) = {	
  0xa088, 0xc000, 0x0007, 0x0007, 0x0000, 0x003f, 0x0000, 0x00ff
, 0x0000, 0x03ff, 0x0000, 0x07ff, 0x0000, 0x0fff, 0x0000, 0x1fff
, 0x0030, 0x1fcf, 0x0030, 0x3fcf, 0x000c, 0x3ff3, 0x000c, 0x7ff3
, 0x003f, 0x7fc0, 0x003f, 0x7fc0, 0x80f3, 0x7f0c, 0x80f3, 0x7f0c
, 0x83ff, 0x7c00, 0x83ff, 0x7c00, 0x833f, 0x7cc0, 0x433f, 0x3cc0
, 0x4330, 0x3ccf, 0x4330, 0x3ccf, 0x200c, 0x1ff3, 0x200c, 0x1ff3
, 0x1000, 0x0fff, 0x1000, 0x0fff, 0x0800, 0x07ff, 0x0400, 0x03ff
, 0x0300, 0x00ff, 0x00c0, 0x003f, 0x0038, 0x0007, 0x0007, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000
};

UWORD sprite_bubble_right[32*2+4] __attribute__((section (".MEMF_CHIP"))) = {	
  0xa090, 0xc000, 0xc000, 0xc000, 0x3800, 0xf800, 0x0600, 0xfe00
, 0x0180, 0xff80, 0x3840, 0xffc0, 0x0420, 0xffe0, 0x0310, 0xfff0
, 0x0c90, 0xf3f0, 0x0c88, 0xf3f8, 0x3048, 0xcff8, 0x3024, 0xcffc
, 0xfc24, 0x03fc, 0xfc24, 0x03fc, 0xcf02, 0x30fe, 0xcf02, 0x30fe
, 0xffc2, 0x003e, 0xffc2, 0x003e, 0xfcc2, 0x033e, 0xfcc0, 0x033c
, 0x0cc0, 0xf33c, 0x0cc0, 0xf33c, 0x3000, 0xcff8, 0x3000, 0xcff8
, 0x0000, 0xfff0, 0x0000, 0xfff0, 0x0000, 0xffe0, 0x0000, 0xffc0
, 0x0000, 0xff80, 0x0000, 0xfe00, 0x0000, 0xf800, 0xc000, 0x0000
, 0x0000, 0x0000, 0x0000, 0x0000
};

UWORD sprite_data_dummy[ ] __attribute__((section (".MEMF_CHIP"))) = {
0x29c8, 0x2a00, 0, 0 ,0 ,0           
};

// sprite data invader 1
UWORD sprite_inv1[ ] __attribute__((section (".MEMF_CHIP"))) = {
  0x4080, 0x5000, 0x0240, 0x0380, 0x0240, 0x0380, 0x0c30, 0x0fc0
, 0x0810, 0x0fe0, 0x300c, 0x3ff0, 0x2004, 0x3ff8, 0xc003, 0xf3cc
, 0x8001, 0xf3ce, 0x8001, 0xfffe, 0x7fff, 0x8000, 0x0c10, 0x0820
, 0x0c10, 0x0820, 0x2244, 0x3388, 0x2244, 0x3388, 0x8811, 0xcc22
, 0x8811, 0xcc22, 0x0000, 0x0000
};

// sprite data invader 2
UWORD sprite_inv2[ ] __attribute__((section (".MEMF_CHIP"))) = {
  0x4080, 0x5000, 0x0240, 0x0380, 0x0240, 0x0380, 0x0c30, 0x0fc0
, 0x0810, 0x0fe0, 0x300c, 0x3ff0, 0x2004, 0x3ff8, 0xc003, 0xf3cc
, 0x8001, 0xf3ce, 0x8001, 0xfffe, 0x7e7f, 0x8180, 0x2244, 0x3388
, 0x23c4, 0x3208, 0x8001, 0xc002, 0x8001, 0xc002, 0x2004, 0x3008
, 0x2004, 0x3008, 0x0000, 0x0000
};






// Copperlist to use while precalc occurs
UWORD copperlist_precalc[] __attribute__((section (".MEMF_CHIP"))) = {
	0xab4f, 0xfffe, 						//Wait for line ab, entry 0
	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	//entry 2
	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	
	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	
	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	
	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	
	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	
	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	
	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	
	0x180, 0x0000,	

	0xac4f, 0xfffe, 						//Wait for line ac, entry 66
	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	//entry 68
	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	
	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	
	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	
	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	
	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	
	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	
	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	0x180, 0x0333,	
	0x180, 0x0000,	

	0xffff, 0xfffe // end copper list
};

UBYTE sine64x256[] __attribute__((section (".MEMF_FAST"))) = {
0x20,0x21,0x22,0x22,0x23,0x24,0x25,0x25,
0x26,0x27,0x28,0x29,0x29,0x2a,0x2b,0x2c,
0x2c,0x2d,0x2e,0x2e,0x2f,0x30,0x30,0x31,
0x32,0x32,0x33,0x34,0x34,0x35,0x35,0x36,
0x37,0x37,0x38,0x38,0x39,0x39,0x3a,0x3a,
0x3b,0x3b,0x3b,0x3c,0x3c,0x3d,0x3d,0x3d,
0x3e,0x3e,0x3e,0x3e,0x3f,0x3f,0x3f,0x3f,
0x3f,0x40,0x40,0x40,0x40,0x40,0x40,0x40,
0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,
0x3f,0x3f,0x3f,0x3f,0x3f,0x3e,0x3e,0x3e,
0x3e,0x3d,0x3d,0x3d,0x3c,0x3c,0x3b,0x3b,
0x3b,0x3a,0x3a,0x39,0x39,0x38,0x38,0x37,
0x37,0x36,0x35,0x35,0x34,0x34,0x33,0x32,
0x32,0x31,0x30,0x30,0x2f,0x2e,0x2e,0x2d,
0x2c,0x2c,0x2b,0x2a,0x29,0x29,0x28,0x27,
0x26,0x25,0x25,0x24,0x23,0x22,0x22,0x21,
0x20,0x1f,0x1e,0x1e,0x1d,0x1c,0x1b,0x1b,
0x1a,0x19,0x18,0x17,0x17,0x16,0x15,0x14,
0x14,0x13,0x12,0x12,0x11,0x10,0x10,0xf,
0xe,0xe,0xd,0xc,0xc,0xb,0xb,0xa,
0x9,0x9,0x8,0x8,0x7,0x7,0x6,0x6,
0x5,0x5,0x5,0x4,0x4,0x3,0x3,0x3,
0x2,0x2,0x2,0x2,0x1,0x1,0x1,0x1,
0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
0x1,0x1,0x1,0x1,0x1,0x2,0x2,0x2,
0x2,0x3,0x3,0x3,0x4,0x4,0x5,0x5,
0x5,0x6,0x6,0x7,0x7,0x8,0x8,0x9,
0x9,0xa,0xb,0xb,0xc,0xc,0xd,0xe,
0xe,0xf,0x10,0x10,0x11,0x12,0x12,0x13,
0x14,0x14,0x15,0x16,0x17,0x17,0x18,0x19,
0x1a,0x1b,0x1b,0x1c,0x1d,0x1e,0x1e,0x1f
};


// colors main fx green
UWORD bitplanecolors1[] __attribute__((section (".MEMF_FAST"))) = {
	0x0000, 0x0010,0x0121,0x0131,0x0242,0x0353,0x0464,0x0575,
	0x0686, 0x0797,0x08a8,0x09b9,0x0aca,0x0bdb,0x0cec,0x0dfd
	};
// colors main fx blue
UWORD bitplanecolors2[] __attribute__((section (".MEMF_FAST"))) = {
	0x0000,0x0001,0x0112,0x0113,0x0224,0x0335,0x0446,0x0557,
	0x0668,0x0779,0x088a,0x099b,0x0aac,0x0bbd,0x0cce,0x0ddf
	};
// colors main fx cyan
UWORD bitplanecolors3[] __attribute__((section (".MEMF_FAST"))) = {
	0x0000,0x0011,0x0122,0x0133,0x0244,0x0355,0x0466,0x0577,
	0x0688,0x0799,0x08aa,0x09bb,0x0acc,0x0bdd,0x0cee,0x0dff
	};
// colors main fx yellow
	UWORD bitplanecolors4[] __attribute__((section (".MEMF_FAST"))) = {
	0x0000,0x0110,0x0221,0x0331,0x0442,0x0553,0x0664,0x0775,
	0x0886,0x0997,0x0aa8,0x0bb9,0x0cca,0x0ddb,0x0eec,0x0ffd
	};


// colors main fx green inverted
UWORD bitplanecolors1i[] __attribute__((section (".MEMF_FAST"))) = {
	0x0dfd,0x0cec,0x0bdb,0x0aca,0x09b9,0x08a8,0x0797,0x0686,
	0x0575,0x0464,0x0353,0x0242,0x0131,0x0121,0x0010,0x0000
	};
// colors main fx blue inverted
UWORD bitplanecolors2i[] __attribute__((section (".MEMF_FAST"))) = {
	0x0ddf,0x0cce,0x0bbd,0x0aac,0x099b,0x088a,0x0779,0x0668,
	0x0557,0x0446,0x0335,0x0224,0x0113,0x0112,0x0001,0x0000
	};
// colors main fx cyan inverted
UWORD bitplanecolors3i[] __attribute__((section (".MEMF_FAST"))) = {
	0x0dff,0x0cee,0x0bdd,0x0acc,0x09bb,0x08aa,0x0799,0x0688,
	0x0577,0x0466,0x0355,0x0244,0x0133,0x0122,0x0011,0x0000
	};
// colors main fx yellow inverted
	UWORD bitplanecolors4i[] __attribute__((section (".MEMF_FAST"))) = {
	0x0ffd,0x0eec,0x0ddb,0x0cca,0x0bb9,0x0aa8,0x0997,0x0886,
	0x0775,0x0664,0x0553,0x0442,0x0331,0x0221,0x0110,0x0000
	};


// colors title logo
UWORD bitplanecolors_title[] __attribute__((section (".MEMF_FAST"))) = {
	0x0000, 0x0111, 0x0fff, 0x08ff, 0x05de, 0x03bc, 0x019a, 0x0189,
	0x0167, 0x0156, 0x0145, 0x0034, 0x0023, 0x0012, 0x07aa, 0x0478
	}; 



// bitplane color buffer	
UWORD bitplanecolorcalc[] __attribute__((section (".MEMF_FAST"))) = {
	0x0000, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
	};

// sprite colors (and bitplane 5)
UWORD spritecolors[] __attribute__((section (".MEMF_FAST"))) = {
	//      ------stripe--------          ------invader-------
	0x0000, 0x0888,0x0666,0x0aaa,  0x0111,0x0555,0x0777,0x0aaa,
	//		------invader-------          -------ship---------
	0x0222, 0x0555,0x0777,0x0aaa,  0x0333,0x0444,0x0777,0x0bbb
	};

// sprite color buffer	
UWORD spritecolorcalc[] __attribute__((section (".MEMF_FAST"))) = {
	0x0000, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000, 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
	};


// bubble colors
UWORD bubblecolors[] __attribute__((section (".MEMF_FAST"))) = {
	0x0112, 0x0224,0x0446,0x0668,0x0446,0x0335,0x0335,0x0335,
	0x077b, 0x066a,0x066a,0x066a,0x0bbd,0x0aac,0x0aac,0x0aac
	}; 
// bubble colors high plane (text+sprites)
UWORD bubblecolors2[] __attribute__((section (".MEMF_FAST"))) = {
         // ------stripe--------        -----bubble--------
	0x0aac, 0x0666,0x066a,0x0aac,0x0446,0x0446,0x066a,0x0aac,        
	0x077b, 0x066a,0x066a,0x066a,0x0bbd,0x0aac,0x0aac,0x0aac
	};



// fire colors red
UWORD firecolors1[] __attribute__((section (".MEMF_FAST"))) = {
	0x0000,0x0200,0x0400,0x0600,0x0800,0x0a00,0x0c00,0x0e00,
	0x0f10,0x0f30,0x0f50,0x0f70,0x0f90,0x0fb0,0x0fd0,0x0ff0
	};
// fire colors red darker
UWORD firecolors1_dark[] __attribute__((section (".MEMF_FAST"))) = {
	0x0600,0x0600,0x0600,0x0600,0x0600,0x0600,0x0600,0x0600,
	0x0600,0x0600,0x0800,0x0a00,0x0c00,0x0e00,0x0f10,0x0f30
	};	

// fire colors blue
UWORD firecolors2[] __attribute__((section (".MEMF_FAST"))) = {
	0x0000,0x0002,0x0004,0x0006,0x0008,0x000a,0x000c,0x000e,
	0x001f,0x003f,0x005f,0x007f,0x009f,0x00bf,0x00df,0x00ff
	};
// fire colors blue darker
UWORD firecolors2_dark[] __attribute__((section (".MEMF_FAST"))) = {
	0x0000,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,
	0x0006,0x0006,0x0008,0x000a,0x000c,0x000e,0x001f,0x003f
	};	


// sine colors grey blue
UWORD sinecolors1[] __attribute__((section (".MEMF_FAST"))) = {
	0x0000,0x0222,0x0444,0x0666,0x0888,0x0aaa,0x0ccc,0x0eee,
	0x001f,0x003f,0x005f,0x007f,0x009f,0x00bf,0x00df,0x00ff
};

// sine colors grey blue bright
UWORD sinecolors1_bright[] __attribute__((section (".MEMF_FAST"))) = {
	0x0666,0x0666,0x0888,0x0aaa,0x0eee,0x0fff,0x0fff,0x0fff,
	0x066f,0x066f,0x088f,0x0aaf,0x0eef,0x0fff,0x0fff,0x0fff
};

// sine colors grey red
UWORD sinecolors3[] __attribute__((section (".MEMF_FAST"))) = {
	0x0000,0x0222,0x0444,0x0666,0x0888,0x0aaa,0x0ccc,0x0eee,
	0x0f10,0x0f30,0x0f50,0x0f70,0x0f90,0x0fb0,0x0fd0,0x0ff0
};

// sine colors grey red bright
UWORD sinecolors3_bright[] __attribute__((section (".MEMF_FAST"))) = {
	0x0666,0x0666,0x0888,0x0aaa,0x0eee,0x0fff,0x0fff,0x0fff,
	0x0f66,0x0f66,0x0f88,0x0faa,0x0fee,0x0fff,0x0fff,0x0fff
	};

// endpic colors 
UWORD endpiccolors[] __attribute__((section (".MEMF_FAST"))) = {
	0x0000,0x0156,0x08ff,0x00bd,0x0079,0x0023,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000
	};

